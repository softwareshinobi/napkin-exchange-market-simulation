    /*
        /// build notification
////        StringBuilder stringBuffer = new StringBuilder();
////        stringBuffer.append("[SMART] created stop loss. ");//.append(stopLossOrder);
////        stringBuffer.append("id=").append(stopLossOrder.getId());
////        stringBuffer.append(", type=").append(stopLossOrder.getType());
////        stringBuffer.append(", stock=").append(stopLossOrder.getSecurity());
////        stringBuffer.append(", sharesToBuy=").append(stopLossOrder.getUnits());
////        stringBuffer.append(", strikePrice=").append(stopLossOrder.getStrike());
////        stringBuffer.append(", relatedOrder=").append(stopLossOrder.getRelatedOrderId());
////
////        //"Created future or limit order created / " + limitOrder.toString()
/////////////////////////////////
////        //    logger.debug("takeProfitOrder / " + takeProfitOrder);
////        notificationService.save(
////                new Notification(
////                        stopLossOrder.getTrader().getUsername(),
////                        NotificationType.LONG_SMART_BUY_FULFILLED,
////                        "long smart buy activities completed"
////                ));



    @PostMapping(value = "/buy/limit/auto-close")
    public List<LimitOrder> placeAssetBuyStopClosingLimitOrder(@RequestBody LimitOrderRequest limitOrderRequest) {

        logger.debug("enter > placeAssetBuyStopLimitOrder");

        limitOrderService.saveLimitOrder(
                new LimitOrder(
                        LimitOrderType.LONG_BUY_STOP,
                        accountService.getAccountByName(limitOrderRequest.getUsername()),
                        stockService.getSecurityBySymbol(limitOrderRequest.getTicker()),
                        limitOrderRequest.getUnits(),
                        limitOrderRequest.getStrike()
                )
        );

        limitOrderService.saveLimitOrder(
                new LimitOrder(
                        LimitOrderType.LONG_STOP_LOSS,
                        accountService.getAccountByName(limitOrderRequest.getUsername()),
                        stockService.getSecurityBySymbol(limitOrderRequest.getTicker()),
                        limitOrderRequest.getUnits(),
                        (limitOrderRequest.getStrike() * 0.99)
                )
        );

        limitOrderService.saveLimitOrder(
                new LimitOrder(
                        LimitOrderType.LONG_TAKE_PROFIT,
                        accountService.getAccountByName(limitOrderRequest.getUsername()),
                        stockService.getSecurityBySymbol(limitOrderRequest.getTicker()),
                        limitOrderRequest.getUnits(),
                        (limitOrderRequest.getStrike() * 1.03)
                )
        );

        List<LimitOrder> userLimitOrderList = limitOrderService.findLimitOrders(
                accountService.getAccountByName(
                        limitOrderRequest.getUsername()
                )
        );

        logger.debug("exit < placeAssetBuyStopLimitOrder");

        return userLimitOrderList;

    }

    @PostMapping(value = "/sell/market")
    protected void sellAssetUnitsMarketPrice(@RequestBody SellStockRequest sellStockRequest)
            throws AccountNotFoundException, AccountBalanceException, AccountInventoryException {

        logger.debug("enter > sellAssetUnitsMarketPrice");

        stockOwnedService.sellStockMarketPrice(sellStockRequest);

        logger.debug("exit < sellAssetUnitsMarketPrice");

    }

    @PostMapping(value = "/sell/stop-loss")
    protected List<LimitOrder> sellAssetUnitsStopLoss(@RequestBody LimitOrderRequest limitOrderRequest)
            throws AccountNotFoundException, AccountBalanceException, AccountInventoryException {

        logger.debug("enter > sellAssetUnitsStopLoss");

        limitOrderService.saveLimitOrder(
                new LimitOrder(
                        LimitOrderType.LONG_STOP_LOSS,
                        accountService.getAccountByName(limitOrderRequest.getUsername()),
                        stockService.getSecurityBySymbol(limitOrderRequest.getTicker()),
                        limitOrderRequest.getUnits(),
                        limitOrderRequest.getStrike())
        );

        List<LimitOrder> userLimitOrderList
                = limitOrderService.findLimitOrders(
                        accountService.getAccountByName(
                                limitOrderRequest.getUsername()));

        logger.debug("exit < sellAssetUnitsStopLoss");

        return userLimitOrderList;

    }

    @PostMapping(value = "/sell/take-profit")
    protected List<LimitOrder> sellAssetUnitsTakeProfit(@RequestBody LimitOrderRequest limitOrderRequest)
            throws AccountNotFoundException, AccountBalanceException, AccountInventoryException {

        logger.debug("enter > sellAssetUnitsTakeProfit");

        limitOrderService.saveLimitOrder(
                new LimitOrder(
                        LimitOrderType.LONG_TAKE_PROFIT,
                        accountService.getAccountByName(limitOrderRequest.getUsername()),
                        stockService.getSecurityBySymbol(limitOrderRequest.getTicker()),
                        limitOrderRequest.getUnits(),
                        limitOrderRequest.getStrike()
                )
        );

        List<LimitOrder> userLimitOrderList
                = limitOrderService.findLimitOrders(
                        accountService.getAccountByName(
                                limitOrderRequest.getUsername()
                        )
                );

        logger.debug("exit < sellAssetUnitsTakeProfit");

        return userLimitOrderList;

    }

     */